version: "3.5"

services:
  #Elasticsearch service provides a distributed and scalable search service 
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.1
    container_name: elasticsearch
    hostname: elasticsearch    
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD", "curl", "-X", "GET", "http://localhost:9200"]
      interval: 30s
      timeout: 15s
      retries: 15        
#    volumes:
#      - esdata1:/usr/share/elasticsearch/data      
    ports:
      - 9200:9200
      - 9300:9300      
    networks:
      - backend-network 

  #Zookeeper service provides distributed configuration management to Kafka
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper 
    hostname: zookeeper
    networks:
      - backend-network
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./target/zk-single-kafka-single/zoo1/data:/data
      - ./target/zk-single-kafka-single/zoo1/datalog:/datalog

  #Kafka is the messaging backbone of the micro-service architecture. The objective is avoid point 2 point connections.
  kafka:
    image: confluentinc/cp-kafka:5.1.0
    container_name: kafka 
    hostname: kafka
    networks:
      - backend-network    
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - ./target/zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  #Ad service
  ad-service:
    container_name: ad-service    
    image: unige/ad-service:latest
    hostname: ad-service
    networks:
      - backend-network    
    ports:
      - "10080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
    depends_on:
      - kafka

  #Search service
  search-service:
    container_name: search-service    
    image: unige/search-service:latest
    hostname: search-service
    networks:
      - backend-network    
    ports:
      - "11080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"      
    depends_on:
       - kafka
       - elasticsearch

  #Category service
  category-service:
    container_name: category-service    
    image: unige/category-service:latest
    hostname: category-service
    networks:
      - backend-network    
    ports:
      - "12080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"      
    depends_on:
       - kafka

  #Image service
  image-service:
    container_name: image-service    
    image: unige/image-service:latest
    hostname: image-service
    networks:
      - backend-network    
    ports:
      - "13080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"      
    depends_on:
       - kafka

#volumes:
#  esdata1:
#    driver: local

networks:
  backend-network:
    driver: bridge
